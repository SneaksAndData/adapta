name: Validate code

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate_commit:
    name: Validate commit
    runs-on: ubuntu-latest
    if: ${{ github.ref != 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9.x' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
      - name: Install Poetry
        run: |
          set -e
          
          curl -sSL https://install.python-poetry.org | python3 - --preview
      - name: Install Dependencies
        run: |
          set -e
          
          poetry install
      - name: Lint
        run: |
          set -e

          pypath=$(pwd)
          export PYTHONPATH="$pypath:$PYTHONPATH"

          find ./proteus -type f -name "*.py" | xargs poetry run pylint
      - name: Unit test
        run: |
          set -e

          pypath=$(pwd)
          export PYTHONPATH="$pypath:$PYTHONPATH"

          poetry run pytest ./tests --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=term-missing:skip-covered | tee pytest-coverage.txt
      - name: Publish Code Coverage
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          junitxml-path: ./junit/test-results.xml

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [ validate_commit ]
    if: ${{ github.ref == 'refs/heads/main' && (needs.validate_commit.result == 'success' || needs.validate_commit.result == 'skipped') && always() }}

    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow
      - name: Create Release
        env:
          MAJOR_V: "0"
          MINOR_V: "1"
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -e
          providedMajor=$MAJOR_V
          providedMinor=$MINOR_V
          currentVersion=$(git describe --tags --abbrev=7)
          currentMinor=$(echo $currentVersion | cut -d. -f2)
          currentMajor=$(echo $currentVersion | cut -d. -f1 | cut -dv -f2)
          if [[ $currentMajor -eq $providedMajor ]] && [[ $providedMinor -eq $currentMinor ]];
          then
            currentRevision=$(echo $(echo $currentVersion | rev | cut -d. -f1) | rev | cut -d- -f1)
            nextRevision=$(( currentRevision + 1 ))
          else
            nextRevision='0'
          fi
          nextVersion="v$providedMajor.$providedMinor.$nextRevision"
          gh release create $nextVersion --generate-notes
